33,120c33,120
< "auto"			{ count(); return(AUTO); }
< "break"			{ count(); return(BREAK); }
< "case"			{ count(); return(CASE); }
< "char"			{ count(); return(CHAR); }
< "const"			{ count(); return(CONST); }
< "continue"		{ count(); return(CONTINUE); }
< "default"		{ count(); return(DEFAULT); }
< "do"			{ count(); return(DO); }
< "double"		{ count(); return(DOUBLE); }
< "else"			{ count(); return(ELSE); }
< "enum"			{ count(); return(ENUM); }
< "extern"		{ count(); return(EXTERN); }
< "float"			{ count(); return(FLOAT); }
< "for"			{ count(); return(FOR); }
< "goto"			{ count(); return(GOTO); }
< "if"			{ count(); return(IF); }
< "int"			{ count(); return(INT); }
< "long"			{ count(); return(LONG); }
< "register"		{ count(); return(REGISTER); }
< "return"		{ count(); return(RETURN); }
< "short"			{ count(); return(SHORT); }
< "signed"		{ count(); return(SIGNED); }
< "sizeof"		{ count(); return(SIZEOF); }
< "static"		{ count(); return(STATIC); }
< "struct"		{ count(); return(STRUCT); }
< "switch"		{ count(); return(SWITCH); }
< "typedef"		{ count(); return(TYPEDEF); }
< "union"			{ count(); return(UNION); }
< "unsigned"		{ count(); return(UNSIGNED); }
< "void"			{ count(); return(VOID); }
< "volatile"		{ count(); return(VOLATILE); }
< "while"			{ count(); return(WHILE); }
< 
< {L}({L}|{D})*		{ count(); return(check_type()); }
< 0[xX]{H}+{IS}?		{ count(); return(CONSTANT); }
< 0{D}+{IS}?		{ count(); return(CONSTANT); }
< {D}+{IS}?		{ count(); return(CONSTANT); }
< '(\\.|[^\\'])+'		{ count(); return(CONSTANT); }
< {D}+{E}{FS}?		{ count(); return(CONSTANT); }
< {D}*"."{D}+({E})?{FS}?	{ count(); return(CONSTANT); }
< {D}+"."{D}*({E})?{FS}?	{ count(); return(CONSTANT); }
< \"(\\.|[^\\"])*\"	{ count(); return(STRING_LITERAL); }
< 
< ">>="			{ count(); return(RIGHT_ASSIGN); }
< "<<="			{ count(); return(LEFT_ASSIGN); }
< "+="			{ count(); return(ADD_ASSIGN); }
< "-="			{ count(); return(SUB_ASSIGN); }
< "*="			{ count(); return(MUL_ASSIGN); }
< "/="			{ count(); return(DIV_ASSIGN); }
< "%="			{ count(); return(MOD_ASSIGN); }
< "&="			{ count(); return(AND_ASSIGN); }
< "^="			{ count(); return(XOR_ASSIGN); }
< "|="			{ count(); return(OR_ASSIGN); }
< ">>"			{ count(); return(RIGHT_OP); }
< "<<"			{ count(); return(LEFT_OP); }
< "++"			{ count(); return(INC_OP); }
< "--"			{ count(); return(DEC_OP); }
< "->"			{ count(); return(PTR_OP); }
< "&&"			{ count(); return(AND_OP); }
< "||"			{ count(); return(OR_OP); }
< "<="			{ count(); return(LE_OP); }
< ">="			{ count(); return(GE_OP); }
< "=="			{ count(); return(EQ_OP); }
< "!="			{ count(); return(NE_OP); }
< ";"			{ count(); return(';'); }
< "{"			{ count(); return('{'); }
< "}"			{ count(); return('}'); }
< ","			{ count(); return(','); }
< ":"			{ count(); return(':'); }
< "="			{ count(); return('='); }
< "("			{ count(); return('('); }
< ")"			{ count(); return(')'); }
< "["			{ count(); return('['); }
< "]"			{ count(); return(']'); }
< "."			{ count(); return('.'); }
< "&"			{ count(); return('&'); }
< "!"			{ count(); return('!'); }
< "~"			{ count(); return('~'); }
< "-"			{ count(); return('-'); }
< "+"			{ count(); return('+'); }
< "*"			{ count(); return('*'); }
< "/"			{ count(); return('/'); }
< "%"			{ count(); return('%'); }
< "<"			{ count(); return('<'); }
< ">"			{ count(); return('>'); }
< "^"			{ count(); return('^'); }
< "|"			{ count(); return('|'); }
< "?"			{ count(); return('?'); }
---
> "auto"			{ count(); yylval.token = AUTO; return(AUTO); }
> "break"			{ count(); yylval.token = BREAK; return(BREAK); }
> "case"			{ count(); yylval.token = CASE; return(CASE); }
> "char"			{ count(); yylval.token = CHAR; return(CHAR); }
> "const"			{ count(); yylval.token = CONST; return(CONST); }
> "continue"		{ count(); yylval.token = CONTINUE; return(CONTINUE); }
> "default"		{ count(); yylval.token = DEFAULT; return(DEFAULT); }
> "do"			{ count(); yylval.token = DO; return(DO); }
> "double"		{ count(); yylval.token = DOUBLE; return(DOUBLE); }
> "else"			{ count(); yylval.token = ELSE; return(ELSE); }
> "enum"			{ count(); yylval.token = ENUM; return(ENUM); }
> "extern"		{ count(); yylval.token = EXTERN; return(EXTERN); }
> "float"			{ count(); yylval.token = FLOAT; return(FLOAT); }
> "for"			{ count(); yylval.token = FOR; return(FOR); }
> "goto"			{ count(); yylval.token = GOTO; return(GOTO); }
> "if"			{ count(); yylval.token = IF; return(IF); }
> "int"			{ count(); yylval.token = INT; return(INT); }
> "long"			{ count(); yylval.token = LONG; return(LONG); }
> "register"		{ count(); yylval.token = REGISTER; return(REGISTER); }
> "return"		{ count(); yylval.token = RETURN; return(RETURN); }
> "short"			{ count(); yylval.token = SHORT; return(SHORT); }
> "signed"		{ count(); yylval.token = SIGNED; return(SIGNED); }
> "sizeof"		{ count(); yylval.token = SIZEOF; return(SIZEOF); }
> "static"		{ count(); yylval.token = STATIC; return(STATIC); }
> "struct"		{ count(); yylval.token = STRUCT; return(STRUCT); }
> "switch"		{ count(); yylval.token = SWITCH; return(SWITCH); }
> "typedef"		{ count(); yylval.token = TYPEDEF; return(TYPEDEF); }
> "union"			{ count(); yylval.token = UNION; return(UNION); }
> "unsigned"		{ count(); yylval.token = UNSIGNED; return(UNSIGNED); }
> "void"			{ count(); yylval.token = VOID; return(VOID); }
> "volatile"		{ count(); yylval.token = VOLATILE; return(VOLATILE); }
> "while"			{ count(); yylval.token = WHILE; return(WHILE); }
> 
> {L}({L}|{D})*		{ count(); yylval.tuple = identifier( yytext, yyleng); return(check_type()); }
> 0[xX]{H}+{IS}?		{ count(); yylval.tuple = constant_hex( yytext, yyleng); return(CONSTANT); }
> 0{D}+{IS}?		{ count(); yylval.tuple = constant_octal( yytext, yyleng); return(CONSTANT); }
> {D}+{IS}?		{ count(); yylval.tuple = constant_decimal( yytext, yyleng); return(CONSTANT); }
> '(\\.|[^\\'])+'		{ count(); yylval.tuple = constant_char( yytext, yyleng); return(CONSTANT); }
> {D}+{E}{FS}?		{ count(); yylval.tuple = constant_float( yytext, yyleng); return(CONSTANT); }
> {D}*"."{D}+({E})?{FS}?	{ count(); yylval.tuple = constant_float( yytext, yyleng); return(CONSTANT); }
> {D}+"."{D}*({E})?{FS}?	{ count(); yylval.tuple = constant_float( yytext, yyleng); return(CONSTANT); }
> \"(\\.|[^\\"])*\"	{ count(); yylval.tuple = string_literal( yytext, yyleng); return(STRING_LITERAL); }
> 
> ">>="			{ count(); yylval.token = RIGHT_ASSIGN; return(RIGHT_ASSIGN); }
> "<<="			{ count(); yylval.token = LEFT_ASSIGN; return(LEFT_ASSIGN); }
> "+="			{ count(); yylval.token = ADD_ASSIGN; return(ADD_ASSIGN); }
> "-="			{ count(); yylval.token = SUB_ASSIGN; return(SUB_ASSIGN); }
> "*="			{ count(); yylval.token = MUL_ASSIGN; return(MUL_ASSIGN); }
> "/="			{ count(); yylval.token = DIV_ASSIGN; return(DIV_ASSIGN); }
> "%="			{ count(); yylval.token = MOD_ASSIGN; return(MOD_ASSIGN); }
> "&="			{ count(); yylval.token = AND_ASSIGN; return(AND_ASSIGN); }
> "^="			{ count(); yylval.token = XOR_ASSIGN; return(XOR_ASSIGN); }
> "|="			{ count(); yylval.token = OR_ASSIGN; return(OR_ASSIGN); }
> ">>"			{ count(); yylval.token = RIGHT_OP; return(RIGHT_OP); }
> "<<"			{ count(); yylval.token = LEFT_OP; return(LEFT_OP); }
> "++"			{ count(); yylval.token = INC_OP; return(INC_OP); }
> "--"			{ count(); yylval.token = DEC_OP; return(DEC_OP); }
> "->"			{ count(); yylval.token = PTR_OP; return(PTR_OP); }
> "&&"			{ count(); yylval.token = AND_OP; return(AND_OP); }
> "||"			{ count(); yylval.token = OR_OP; return(OR_OP); }
> "<="			{ count(); yylval.token = LE_OP; return(LE_OP); }
> ">="			{ count(); yylval.token = GE_OP; return(GE_OP); }
> "=="			{ count(); yylval.token = EQ_OP; return(EQ_OP); }
> "!="			{ count(); yylval.token = NE_OP; return(NE_OP); }
> ";"			{ count(); yylval.token = ';'; return(';'); }
> "{"			{ count(); yylval.token = '{'; return('{'); }
> "}"			{ count(); yylval.token = '}'; return('}'); }
> ","			{ count(); yylval.token = ','; return(','); }
> ":"			{ count(); yylval.token = ':'; return(':'); }
> "="			{ count(); yylval.token = '='; return('='); }
> "("			{ count(); yylval.token = '('; return('('); }
> ")"			{ count(); yylval.token = ')'; return(')'); }
> "["			{ count(); yylval.token = '['; return('['); }
> "]"			{ count(); yylval.token = ']'; return(']'); }
> "."			{ count(); yylval.token = '.'; return('.'); }
> "&"			{ count(); yylval.token = '&'; return('&'); }
> "!"			{ count(); yylval.token = '!'; return('!'); }
> "~"			{ count(); yylval.token = '~'; return('~'); }
> "-"			{ count(); yylval.token = '-'; return('-'); }
> "+"			{ count(); yylval.token = '+'; return('+'); }
> "*"			{ count(); yylval.token = '*'; return('*'); }
> "/"			{ count(); yylval.token = '/'; return('/'); }
> "%"			{ count(); yylval.token = '%'; return('%'); }
> "<"			{ count(); yylval.token = '<'; return('<'); }
> ">"			{ count(); yylval.token = '>'; return('>'); }
> "^"			{ count(); yylval.token = '^'; return('^'); }
> "|"			{ count(); yylval.token = '|'; return('|'); }
> "?"			{ count(); yylval.token = '?'; return('?'); }
