1. The parser will never know where to stop and accept the string.
2. The original parser stops when you insert a character other than a or b, and test2 contains digits.
3. It only contains a's and b's.
4. DFA has more states, so it has more steps to go through and more transitions to record.
5. Both are 53kb.
6. NFA has ambiguous strings, where there are paths that lead to it being rejected and paths that lead to it being accepted.
7. line
8. It has an option of printing something when there is no character found.
9. 
line		: A0 '\n'
		| line A0 '\n'
		| error '\n' { yysync(); yyerrok; }
		;
A0		: aletter A0
		| bletter A0
		| aletter A1
		| bletter A1
		;
A1		: bletter A2
		;
A2		: aletter A3
		| bletter A3
		;
A3		: /* empty */ { printf( "NFA A0: accept\n"); }
		;
aletter		: 'a'
		;
bletter		: 'b'
		;

10.
line		: A0 '\n'
		| line A0 '\n'
		| error '\n' { yysync(); yyerrok; }
		;
A0		: aletter A1
		| bletter A1
		| /* empty */ { printf( "DFA A0: accept\n"); }
		;
A1		: aletter A2
		| bletter A2
		;
A2		: aletter A3
		| bletter A3
		;
A3		: aletter A5
		| bletter A4
		| /* empty */ { printf( "DFA A3: accept\n"); }
		;
A4		: aletter A0
		| bletter A5
		| /* empty */ { printf( "DFA A4: accept\n"); }
		;
A5		: /* empty */ { printf( "DFA A5: accept\n"); }
		; 
aletter		: 'a'
		;
bletter		: 'b'
		;